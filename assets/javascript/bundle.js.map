{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./assets/javascript/board.js","webpack:///./assets/javascript/buttons.js","webpack:///./assets/javascript/sudoku.js","webpack:///./assets/javascript/tile.js"],"names":["Board","solvedBoard","createSolvedBoard","render","unsolvedBoard","forEach","num","idx","diff","diffMap","board","Array","fill","zero","assigned","rand","Math","ceil","random","validateRow","console","log","randRowIndex","floor","rowStart","rowEnd","i","tile","tiles","tileRowNum","dataset","row","rowTiles","document","querySelectorAll","rowTileNum","rowTile","textContent","value","index","parentNode","classList","add","e","solved","tagName","parseInt","window","alert","enableButtons","submitButton","querySelector","addEventListener","checkProgress","bind","giveUpButton","solve","resetButton","reset","validateInput","includes","data","target","length","determineSubgrid","col","gridRow","gridCol","subGrid","populateTile","boardDiv","tileDiv","createElement","className","column","appendChild"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;ACnEA;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEqBA,K;AACjB,qBAAc;AAAA;;AACV,YAAMC,cAAc,KAAKC,iBAAL,EAApB;AACA;AACA;AACA,aAAKC,MAAL,CAAYF,WAAZ;AACH;;;;+BAEMG,a,EAAe;AAClB;;AAEAA,0BAAcC,OAAd,CAAsB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAChC,oCAAaD,GAAb,EAAkBC,GAAlB;AACH,aAFD;AAGH;;;4CAEgC;AAAA;;AAAA,gBAAfC,IAAe,uEAAR,MAAQ;;AAC7B;AACA,gBAAMC,UAAU;AACZ,wBAAQ,EADI;AAEZ,0BAAU,EAFE;AAGZ,wBAAQ;AAHI,aAAhB;;AAMA,gBAAIC,QAAQ,IAAIC,KAAJ,CAAU,EAAV,EAAcC,IAAd,CAAmB,CAAnB,CAAZ;AACAF,kBAAML,OAAN,CAAc,UAACQ,IAAD,EAAON,GAAP,EAAe;AACzB,oBAAIO,WAAW,KAAf;AACA,uBAAO,CAACA,QAAR,EAAkB;AACd,wBAAMC,OAAOC,KAAKC,IAAL,CAAUD,KAAKE,MAAL,KAAgB,CAA1B,CAAb;AACA,wBAAI,MAAKC,WAAL,CAAiBJ,IAAjB,EAAuBR,GAAvB,EAA4BG,KAA5B,CAAJ,EAAwC;AACpCA,8BAAMH,GAAN,IAAaQ,IAAb;AACAD,mCAAW,IAAX;AACH;AACJ;AACJ,aATD;;AAWAM,oBAAQC,GAAR,CAAYX,KAAZ;;AAEA,mBAAOA,KAAP;AACH;;;oCAEWK,I,EAAMR,G,EAAKG,K,EAAO;AAC1B,gBAAMY,eAAeN,KAAKO,KAAL,CAAWhB,MAAM,CAAjB,CAArB;AACA,gBAAMiB,WAAWF,eAAe,CAAhC;AACA,gBAAMG,SAASD,WAAW,CAA1B;AACA,iBAAK,IAAIE,IAAIF,QAAb,EAAuBE,IAAID,MAA3B,EAAmCC,GAAnC,EAAwC;AACpC,oBAAIX,SAASL,MAAMgB,CAAN,CAAb,EAAuB;AACnB,2BAAO,KAAP;AACH;AACJ;;AAED,mBAAO,IAAP;AACH;;;qCAEYzB,W,EAAa;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAII;AACJ;;AAEH;;;iCAEQ0B,I,EAAMC,K,EAAO;AAClB,gBAAMC,aAAaF,KAAKG,OAAL,CAAaC,GAAhC;AACA,gBAAMC,WAAWC,SAASC,gBAAT,iBAAwCL,UAAxC,QAAjB;AACA;AACA;;AAEAG,qBAAS3B,OAAT,CAAiB,mBAAW;AACxB;AACA;AACA;AACA,oBAAM8B,aAAaC,QAAQC,WAAR,GAAsBD,QAAQC,WAA9B,GAA4CD,QAAQE,KAAvE;;AAEA;AACA,oBAAIX,KAAKG,OAAL,CAAaS,KAAb,KAAuBH,QAAQN,OAAR,CAAgBS,KAA3C,EAAkD;AAC9C;AACF,iBAFF,MAEQ,IAAIH,QAAQE,KAAR,KAAkB,EAAtB,EAA0B;AAC9B;AACA;AACH,iBAHO,MAGD;AACH,wBAAIX,KAAKW,KAAL,KAAeH,UAAnB,EAA+B;AAC3BR,6BAAKa,UAAL,CAAgBC,SAAhB,CAA0BC,GAA1B,CAA8B,OAA9B;AACH;AACJ;AACJ,aAjBD;AAkBH;;AAED;;;;sCACcC,C,EAAG;AACb,gBAAMf,QAAQK,SAASC,gBAAT,CAA0B,OAA1B,CAAd;AACA,gBAAIU,SAAS,IAAb;AACAhB,kBAAMvB,OAAN,CAAc,UAACsB,IAAD,EAAOpB,GAAP,EAAe;AACzB;AACA,oBAAIoB,KAAKkB,OAAL,KAAiB,MAArB,EAA6B;AACzB;AACH,iBAFD,MAEO,IAAIlB,KAAKW,KAAL,KAAe,EAAnB,EAAuB;AAC1BM,6BAAS,KAAT;AACH,iBAFM,MAEA,IAAI3C,YAAY6C,SAASnB,KAAKG,OAAL,CAAaS,KAAtB,CAAZ,MAA8CO,SAASnB,KAAKW,KAAd,CAAlD,EAAwE;AAC3EX,yBAAKa,UAAL,CAAgBC,SAAhB,CAA0BC,GAA1B,CAA8B,OAA9B;AACAE,6BAAS,KAAT;AACH;AACJ,aAVD;;AAYA,gBAAIA,MAAJ,EAAY;AACRG,uBAAOC,KAAP,CAAa,yCAAb;AACH;AACJ;;;8BAEKL,C,EAAG;AACLvB,oBAAQC,GAAR,CAAY,SAAZ;AACH;;;8BAEKsB,C,EAAG;AACLvB,oBAAQC,GAAR,CAAY,WAAZ;AACH;;;;;;AAML;AACI;AACJ;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;;kBA9KqBrB,K;;;;;;;;;;;;;;;;;;AC1BrB;;;;;;AAEA,SAASiD,aAAT,CAAuBvC,KAAvB,EAA8B;AAC1B,QAAMwC,eAAejB,SAASkB,aAAT,CAAuB,QAAvB,CAArB;AACAD,iBAAaE,gBAAb,CAA8B,OAA9B,EAAuC1C,MAAM2C,aAAN,CAAoBC,IAApB,CAAyB5C,KAAzB,CAAvC;;AAEA,QAAM6C,eAAetB,SAASkB,aAAT,CAAuB,UAAvB,CAArB;AACAI,iBAAaH,gBAAb,CAA8B,OAA9B,EAAuC1C,MAAM8C,KAA7C;;AAEA,QAAMC,cAAcxB,SAASkB,aAAT,CAAuB,QAAvB,CAApB;AACAM,gBAAYL,gBAAZ,CAA6B,OAA7B,EAAsC1C,MAAMgD,KAA5C;AACH;;kBAEcT,a;;;;;;;;;;;;;;ACbf;;;;AACA;;;;;;AAGA,IAAMvC,QAAQ,qBAAd;AACA,uBAAcA,KAAd,E;;;;;;;;;;;;;;;;;ACLA,SAASiD,aAAT,CAAuBhB,CAAvB,EAA0B;AACtB;AACA,QAAI,CAAC,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8CiB,QAA9C,CAAuDjB,EAAEkB,IAAzD,CAAL,EAAqE;AACjElB,UAAEmB,MAAF,CAASxB,KAAT,GAAiB,EAAjB;AACH,KAFD,MAEO,IAAIK,EAAEkB,IAAF,CAAOE,MAAP,KAAkB,CAAtB,EAAyB;AAC5BpB,UAAEmB,MAAF,CAASxB,KAAT,GAAiBK,EAAEkB,IAAnB;AACH;;AAED;AACA;AACA;AACH;;AAED,SAASG,gBAAT,CAA0BC,GAA1B,EAA+BlC,GAA/B,EAAoC;AAChC;AACA,QAAMmC,UAAUlD,KAAKO,KAAL,CAAWQ,MAAM,CAAjB,CAAhB;AACA,QAAMoC,UAAUnD,KAAKO,KAAL,CAAW0C,MAAM,CAAjB,CAAhB;AACA,QAAMG,UAASF,UAAU,CAAV,GAAcC,OAA7B;AACA,WAAOC,OAAP;AACH;;AAED,SAASC,YAAT,CAAsB/D,GAAtB,EAA2BC,GAA3B,EAAgC;AAC5B,QAAM+D,WAAWrC,SAASkB,aAAT,CAAuB,QAAvB,CAAjB;AACA,QAAMoB,UAAUtC,SAASuC,aAAT,CAAuB,KAAvB,CAAhB;AACAD,YAAQE,SAAR,GAAoB,UAApB;;AAEA,QAAI9C,aAAJ;AACA,QAAIrB,QAAQ,CAAZ,EAAe;AACXqB,eAAOM,SAASuC,aAAT,CAAuB,OAAvB,CAAP;AACA7C,aAAK8C,SAAL,GAAiB,YAAjB;AACH,KAHD,MAGO;AACH9C,eAAOM,SAASuC,aAAT,CAAuB,MAAvB,CAAP;AACA7C,aAAKU,WAAL,GAAmB/B,GAAnB;AACAqB,aAAK8C,SAAL,GAAiB,WAAjB;AACH;;AAED;AACA,QAAMR,MAAM1D,MAAM,CAAlB;AACA,QAAMwB,MAAMf,KAAKO,KAAL,CAAWhB,MAAM,CAAjB,CAAZ;AACAoB,SAAKG,OAAL,CAAaS,KAAb,GAAqBhC,GAArB;AACAoB,SAAKG,OAAL,CAAa4C,MAAb,GAAsBT,GAAtB;AACAtC,SAAKG,OAAL,CAAaC,GAAb,GAAmBA,GAAnB;AACAJ,SAAKG,OAAL,CAAasC,OAAb,GAAuBJ,iBAAiBC,GAAjB,EAAsBlC,GAAtB,CAAvB;;AAEAuC,aAASK,WAAT,CAAqBJ,OAArB;AACAA,YAAQI,WAAR,CAAoBhD,IAApB;;AAEAA,SAAKyB,gBAAL,CAAsB,OAAtB,EAA+BO,aAA/B;AACH;;kBAEcU,Y","file":"assets/javascript/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./assets/javascript/sudoku.js\");\n","import populateTile from './tile';\n\n// const unsolvedBoard = [\n//     5, 3, 0, 0, 7, 0, 0, 0, 0,\n//     6, 0, 0, 1, 9, 5, 0, 0, 0,\n//     0, 9, 8, 0, 0, 0, 0, 6, 0,\n//     8, 0, 0, 0, 6, 0, 0, 0, 3,\n//     4, 0, 0, 8, 0, 3, 0, 0, 1,\n//     7, 0, 0, 0, 2, 0, 0, 0, 6,\n//     0, 6, 0, 0, 0, 0, 2, 8, 0,\n//     0, 0, 0, 4, 1, 9, 0, 0, 5,\n//     0, 0, 0, 0, 8, 0, 0, 7, 9\n// ]\n\n// const solvedBoard = [\n//     5, 3, 4, 6, 7, 8, 9, 1, 2,\n//     6, 7, 2, 1, 9, 5, 3, 4, 8,\n//     1, 9, 8, 3, 4, 2, 5, 6, 7,\n//     8, 5, 9, 7, 6, 1, 4, 2, 3,\n//     4, 2, 6, 8, 5, 3, 7, 9, 1,\n//     7, 1, 3, 9, 2, 4, 8, 5, 6,\n//     9, 6, 1, 5, 3, 7, 2, 8, 4,\n//     2, 8, 7, 4, 1, 9, 6, 3, 5,\n//     3, 4, 5, 2, 8, 6, 1, 7, 9\n// ]\n\nexport default class Board { \n    constructor() {\n        const solvedBoard = this.createSolvedBoard();\n        // const unsolvedBoard = unsolvedBoard()        \n        // this.render(unsolvedBoard);\n        this.render(solvedBoard);\n    }\n\n    render(unsolvedBoard) {\n        // TODO clear any previous boards \n\n        unsolvedBoard.forEach((num, idx) => {\n            populateTile(num, idx);\n        });\n    }\n\n    createSolvedBoard(diff = 'easy') {\n        // number of tiles to be given in puzzle\n        const diffMap = {\n            'easy': 45,\n            'medium': 35,\n            'hard': 25\n        }\n\n        let board = new Array(81).fill(0); \n        board.forEach((zero, idx) => {\n            let assigned = false;\n            while (!assigned) {\n                const rand = Math.ceil(Math.random() * 9);\n                if (this.validateRow(rand, idx, board)) {\n                    board[idx] = rand;\n                    assigned = true;\n                }\n            }\n        })\n\n        console.log(board);\n\n        return board;        \n    } \n\n    validateRow(rand, idx, board) {\n        const randRowIndex = Math.floor(idx / 9);\n        const rowStart = randRowIndex * 9;\n        const rowEnd = rowStart + 9;\n        for (let i = rowStart; i < rowEnd; i++) {\n            if (rand === board[i]) {\n                return false; \n            }\n        }\n\n        return true; \n    }\n    \n    unsolveBoard(solvedBoard) {\n        // let j = diffMap[diff];  \n        // solvedBoard.forEach((num, idx) => {\n        //     // Math.ceil(Math.random() * 10)\n        //     // check against row \n        //     const rowIndex = Math.floor(idx / 9);\n        //     const rowStart = rowIndex * 9;\n        //     const rowEnd = rowStart + 9;\n        //     for (let i = rowStart; i < rowEnd; i++) {\n        //         let placed = false; \n        //     }\n    \n        // numbers.forEach((num, idx) => {\n        //     populateTile(num, idx);\n        // });\n    \n    \n    \n            // check against column \n        // })\n\n    }\n\n    checkRow(tile, tiles) {\n        const tileRowNum = tile.dataset.row;\n        const rowTiles = document.querySelectorAll(`[data-row=\"${tileRowNum}\"]`);\n        // console.log('tileRowNum', tileRowNum);\n        // console.log('rowTiles', rowTiles);\n        \n        rowTiles.forEach(rowTile => {\n            // console.log(rowTile.value || rowTile.textContent);\n            // console.log('tile index', tile.dataset.index);\n            // console.log('rowTile index', rowTile.dataset.index);\n            const rowTileNum = rowTile.textContent ? rowTile.textContent : rowTile.value;\n\n            // don't check a tile against itself   \n            if (tile.dataset.index === rowTile.dataset.index) {\n                return;\n             } else if (rowTile.value === '') {\n                // don't check against an empty input \n                return;\n            } else {\n                if (tile.value === rowTileNum) {\n                    tile.parentNode.classList.add('wrong');\n                }\n            }\n        });\n    }\n\n    // button methods     \n    checkProgress(e) {\n        const tiles = document.querySelectorAll('.tile');\n        let solved = true; \n        tiles.forEach((tile, idx) => {\n            // only check input (not span) tiles \n            if (tile.tagName === 'SPAN') {\n                return ; \n            } else if (tile.value === '') {\n                solved = false;\n            } else if (solvedBoard[parseInt(tile.dataset.index)] !== parseInt(tile.value)) {\n                tile.parentNode.classList.add('wrong');\n                solved = false;\n            }\n        });\n\n        if (solved) {\n            window.alert('Congratulations! You solved the puzzle!');\n        }\n    }\n\n    solve(e) {\n        console.log('solving');\n    }\n\n    reset(e) {\n        console.log('resetting');\n    }\n\n\n}\n\n\n// exports.checkBoard = () => {\n    // console.log('checking the board');\n// }\n\n// function setupBoard (board) {\n//     board.forEach((num, idx) => {\n//         populateTile(num, idx);\n//     })\n// }\n\n// function createBoards(diff = 'easy') {\n//     const diffMap = {\n//         'easy': 45,\n//         'medium': 35,\n//         'hard': 25\n//     }\n    \n//     let solvedBoard = []; \n    \n//     for (let i = 0; i < 81; i++) {\n//         solvedBoard.push(0);\n//     }\n\n//     let j = diffMap[diff];  \n//     solvedBoard.forEach((num, idx) => {\n//         // Math.ceil(Math.random() * 10)\n//         // check against row \n//         const rowIndex = Math.floor(idx / 9);\n//         const rowStart = rowIndex * 9;\n//         const rowEnd = rowStart + 9;\n//         for (let i = rowStart; i < rowEnd; i++) {\n//             let placed = false; \n//         }\n        \n\n//         // check against column \n//     })\n\n// } \n\n\n","import Board from './board';\n\nfunction enableButtons(board) {    \n    const submitButton = document.querySelector('.check');\n    submitButton.addEventListener('click', board.checkProgress.bind(board));\n    \n    const giveUpButton = document.querySelector('.give-up');\n    giveUpButton.addEventListener('click', board.solve);\n\n    const resetButton = document.querySelector('.reset');\n    resetButton.addEventListener('click', board.reset);\n}    \n\nexport default enableButtons; ","import Board from './board.js';\nimport enableButtons from './buttons';\n\n\nconst board = new Board();\nenableButtons(board);\n\n\n\n\n","function validateInput(e) {        \n    // only permit a single number as input \n    if (![\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"].includes(e.data)) {\n        e.target.value = '';\n    } else if (e.data.length === 1) {\n        e.target.value = e.data;\n    }\n\n    // TODO: Validate against all other numbers in row & column \n    // validate against row \n    // validate against column \n}\n\nfunction determineSubgrid(col, row) {\n    // formula to determine subgrid found at: https://medium.com/@0xsven/sudoku-validation-with-javascript-1297712093bf\n    const gridRow = Math.floor(row / 3);\n    const gridCol = Math.floor(col / 3);\n    const subGrid= gridRow * 3 + gridCol;\n    return subGrid;\n}\n\nfunction populateTile(num, idx) {\n    const boardDiv = document.querySelector('.board');\n    const tileDiv = document.createElement('div')\n    tileDiv.className = 'tile-div';\n    \n    let tile;\n    if (num === 0) {\n        tile = document.createElement('input');\n        tile.className = 'tile input';\n    } else {\n        tile = document.createElement('span');\n        tile.textContent = num;\n        tile.className = 'tile span';\n    }\n\n    // add index, column, and row as data attributes \n    const col = idx % 9;\n    const row = Math.floor(idx / 9);\n    tile.dataset.index = idx;\n    tile.dataset.column = col;\n    tile.dataset.row = row;\n    tile.dataset.subGrid = determineSubgrid(col, row);\n\n    boardDiv.appendChild(tileDiv);\n    tileDiv.appendChild(tile); \n\n    tile.addEventListener('input', validateInput);\n}\n\nexport default populateTile;"],"sourceRoot":""}