{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./assets/javascript/board.js","webpack:///./assets/javascript/buttons.js","webpack:///./assets/javascript/generateBoard.js","webpack:///./assets/javascript/sudoku.js","webpack:///./assets/javascript/tile.js"],"names":["Board","unsolvedBoard","solvedBoard","render","board","document","querySelector","innerHTML","forEach","num","idx","e","tiles","querySelectorAll","solved","tile","tagName","value","parseInt","dataset","index","parentNode","classList","add","window","alert","hintedTiles","remove","inputs","input","enableButtons","submitButton","addEventListener","checkProgress","bind","clearButton","clearHints","giveUpButton","solve","resetButton","reset","createSolvedBoard","diff","diffMap","Array","fill","zero","assigned","rand","Math","ceil","random","validateRow","validateColumn","randColIndex","i","randRowIndex","floor","rowStart","rowEnd","validateSubgrid","randSubgrid","determineSubgrid","tileIdx","tileColIndex","tileRowIndex","tileSubgrid","col","row","gridRow","gridCol","subGrid","unsolveBoard","checkRow","tileRowNum","rowTiles","rowTileNum","rowTile","textContent","generateBoard","validateInput","includes","data","target","length","populateTile","boardDiv","tileDiv","createElement","className","column","appendChild"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACnEA;;;;AACA;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEqBA,K;AACjB,qBAAc;AAAA;;AACV;AADU,6BAE2B,8BAF3B;AAAA;AAAA,YAEHC,aAFG;AAAA,YAEYC,WAFZ;;AAIV,aAAKC,MAAL,CAAYD,WAAZ;AACH;;;;+BAEMD,a,EAAe;AAClB;AACA,gBAAMG,QAAQC,SAASC,aAAT,CAAuB,QAAvB,CAAd;AACAF,kBAAMG,SAAN,GAAkB,EAAlB;;AAEAN,0BAAcO,OAAd,CAAsB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAChC,oCAAaD,GAAb,EAAkBC,GAAlB;AACH,aAFD;AAGH;;AAED;;;;sCACcC,C,EAAG;AACb,gBAAMC,QAAQP,SAASQ,gBAAT,CAA0B,OAA1B,CAAd;AACA,gBAAIC,SAAS,IAAb;AACAF,kBAAMJ,OAAN,CAAc,UAACO,IAAD,EAAOL,GAAP,EAAe;AACzB;AACA,oBAAIK,KAAKC,OAAL,KAAiB,MAArB,EAA6B;AACzB;AACH,iBAFD,MAEO,IAAID,KAAKE,KAAL,KAAe,EAAnB,EAAuB;AAC1BH,6BAAS,KAAT;AACH,iBAFM,MAEA,IAAIZ,YAAYgB,SAASH,KAAKI,OAAL,CAAaC,KAAtB,CAAZ,MAA8CF,SAASH,KAAKE,KAAd,CAAlD,EAAwE;AAC3EF,yBAAKM,UAAL,CAAgBC,SAAhB,CAA0BC,GAA1B,CAA8B,WAA9B;AACAT,6BAAS,KAAT;AACH,iBAHM,MAGA,IAAIZ,YAAYgB,SAASH,KAAKI,OAAL,CAAaC,KAAtB,CAAZ,MAA8CF,SAASH,KAAKE,KAAd,CAAlD,EAAwE;AAC3EF,yBAAKM,UAAL,CAAgBC,SAAhB,CAA0BC,GAA1B,CAA8B,SAA9B;AACH;AACJ,aAZD;;AAcA,gBAAIT,MAAJ,EAAY;AACRU,uBAAOC,KAAP,CAAa,yCAAb;AACH;AACJ;;;mCAEUd,C,EAAG;AACV,gBAAMe,cAAcrB,SAASQ,gBAAT,CAA0B,sBAA1B,CAApB;AACAa,wBAAYlB,OAAZ,CAAoB,gBAAQ;AACxBO,qBAAKO,SAAL,CAAeK,MAAf,CAAsB,SAAtB;AACAZ,qBAAKO,SAAL,CAAeK,MAAf,CAAsB,WAAtB;AACH,aAHD;AAIH;;;8BAEKhB,C,EAAG;AACL,gBAAMiB,SAASvB,SAASQ,gBAAT,CAA0B,aAA1B,CAAf;AACAe,mBAAOpB,OAAP,CAAe,UAACqB,KAAD,EAAW;AACtBA,sBAAMZ,KAAN,GAAcf,YAAY2B,MAAMV,OAAN,CAAcC,KAA1B,CAAd;AACH,aAFD;AAGH;;;8BAEKT,C,EAAG;AACL,iBAAKR,MAAL,CAAYF,aAAZ;AACH;;;;;;kBA1DgBD,K;;;;;;;;;;;;;;;;;;AC3BrB;;;;;;AAEA,SAAS8B,aAAT,CAAuB1B,KAAvB,EAA8B;AAC1B,QAAM2B,eAAe1B,SAASC,aAAT,CAAuB,QAAvB,CAArB;AACAyB,iBAAaC,gBAAb,CAA8B,OAA9B,EAAuC5B,MAAM6B,aAAN,CAAoBC,IAApB,CAAyB9B,KAAzB,CAAvC;;AAEA,QAAM+B,cAAc9B,SAASC,aAAT,CAAuB,QAAvB,CAApB;AACA6B,gBAAYH,gBAAZ,CAA6B,OAA7B,EAAsC5B,MAAMgC,UAA5C;;AAEA,QAAMC,eAAehC,SAASC,aAAT,CAAuB,UAAvB,CAArB;AACA+B,iBAAaL,gBAAb,CAA8B,OAA9B,EAAuC5B,MAAMkC,KAA7C;;AAEA,QAAMC,cAAclC,SAASC,aAAT,CAAuB,QAAvB,CAApB;AACAiC,gBAAYP,gBAAZ,CAA6B,OAA7B,EAAsC5B,MAAMoC,KAAN,CAAYN,IAAZ,CAAiB9B,KAAjB,CAAtC;AACH;;kBAEc0B,a;;;;;;;;;;;;;;;;;AChBf,SAASW,iBAAT,GAA0C;AAAA,QAAfC,IAAe,uEAAR,MAAQ;;AACtC;AACA,QAAMC,UAAU;AACZ,gBAAQ,EADI;AAEZ,kBAAU,EAFE;AAGZ,gBAAQ;AAHI,KAAhB;;AAMA,QAAIvC,QAAQ,IAAIwC,KAAJ,CAAU,EAAV,EAAcC,IAAd,CAAmB,CAAnB,CAAZ;AACAzC,UAAMI,OAAN,CAAc,UAACsC,IAAD,EAAOpC,GAAP,EAAe;AACzB,YAAIqC,WAAW,KAAf;AACA,eAAO,CAACA,QAAR,EAAkB;AACd,gBAAMC,OAAOC,KAAKC,IAAL,CAAUD,KAAKE,MAAL,KAAgB,CAA1B,CAAb;AACA,gBAAIC,YAAYJ,IAAZ,EAAkBtC,GAAlB,EAAuBN,KAAvB,CAAJ,EAAmC;AAC/BA,sBAAMM,GAAN,IAAasC,IAAb;AACAD,2BAAW,IAAX;AACH;AACJ;AACJ,KATD;;AAWA,WAAO3C,KAAP;AACH;;AAED,SAASiD,cAAT,CAAwBL,IAAxB,EAA8BtC,GAA9B,EAAmCN,KAAnC,EAA0C;AACtC,QAAMkD,eAAe5C,MAAM,CAA3B;AACA,SAAK,IAAI6C,IAAID,YAAb,EAA2BC,IAAI,EAA/B,EAAmCA,KAAK,CAAxC,EAA2C;AACvC,YAAIP,SAAS5C,MAAMmD,CAAN,CAAb,EAAuB,OAAO,KAAP;AAC1B;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAO,IAAP;AACH;;AAED,SAASH,WAAT,CAAqBJ,IAArB,EAA2BtC,GAA3B,EAAgCN,KAAhC,EAAuC;AACnC,QAAMoD,eAAeP,KAAKQ,KAAL,CAAW/C,MAAM,CAAjB,CAArB;AACA,QAAM4C,eAAe5C,MAAM,CAA3B;AACA,QAAMgD,WAAWF,eAAe,CAAhC;AACA,QAAMG,SAASD,WAAW,CAA1B;;AAEA,QAAIJ,iBAAiB,CAArB,EAAwB,OAAO,IAAP;AACxB,SAAK,IAAIC,IAAI7C,MAAM,CAAnB,EAAsB6C,KAAKG,QAA3B,EAAqCH,GAArC,EAA0C;AACtC,YAAIP,SAAS5C,MAAMmD,CAAN,CAAb,EAAuB,OAAO,KAAP;AAC1B;AACD,WAAO,IAAP;AACH;;AAED,SAASK,eAAT,CAAyBZ,IAAzB,EAA+BtC,GAA/B,EAAoCN,KAApC,EAA2C;AACvC,QAAMkD,eAAe5C,MAAM,CAA3B;AACA,QAAM8C,eAAeP,KAAKQ,KAAL,CAAW/C,MAAM,CAAjB,CAArB;AACA,QAAMmD,cAAcC,iBAAiBR,YAAjB,EAA+BE,YAA/B,CAApB;;AAEApD,UAAMI,OAAN,CAAc,UAACO,IAAD,EAAOgD,OAAP,EAAmB;AAC7B,YAAMC,eAAeD,UAAU,CAA/B;AACA,YAAME,eAAehB,KAAKQ,KAAL,CAAWM,UAAU,CAArB,CAArB;AACA,YAAMG,cAAcJ,iBAAiBE,YAAjB,EAA+BC,YAA/B,CAApB;;AAEA,YAAIJ,gBAAgBK,WAAhB,IAA+BlB,SAASjC,IAAxC,IAAgDL,QAAQqD,OAA5D,EAAqE;AACjE,mBAAO,KAAP;AACH;AACJ,KARD;AASA,WAAO,IAAP;AACH;;AAED,SAASD,gBAAT,CAA0BK,GAA1B,EAA+BC,GAA/B,EAAoC;AAChC;AACA,QAAMC,UAAUpB,KAAKQ,KAAL,CAAWW,MAAM,CAAjB,CAAhB;AACA,QAAME,UAAUrB,KAAKQ,KAAL,CAAWU,MAAM,CAAjB,CAAhB;AACA,QAAMI,UAAUF,UAAU,CAAV,GAAcC,OAA9B;AACA,WAAOC,OAAP;AACH;;AAED,SAASC,YAAT,CAAsBtE,WAAtB,EAAmC;AAC/B,QAAMD,gBAAgB,EAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,WAAOA,aAAP;AACH;;AAED,SAASwE,QAAT,CAAkB1D,IAAlB,EAAwBH,KAAxB,EAA+B;AAC3B,QAAM8D,aAAa3D,KAAKI,OAAL,CAAaiD,GAAhC;AACA,QAAMO,WAAWtE,SAASQ,gBAAT,iBAAwC6D,UAAxC,QAAjB;AACA;AACA;;AAEAC,aAASnE,OAAT,CAAiB,mBAAW;AACxB;AACA;AACA;AACA,YAAMoE,aAAaC,QAAQC,WAAR,GAAsBD,QAAQC,WAA9B,GAA4CD,QAAQ5D,KAAvE;;AAEA;AACA,YAAIF,KAAKI,OAAL,CAAaC,KAAb,KAAuByD,QAAQ1D,OAAR,CAAgBC,KAA3C,EAAkD;AAC9C;AACH,SAFD,MAEO,IAAIyD,QAAQ5D,KAAR,KAAkB,EAAtB,EAA0B;AAC7B;AACA;AACH,SAHM,MAGA;AACH,gBAAIF,KAAKE,KAAL,KAAe2D,UAAnB,EAA+B;AAC3B7D,qBAAKM,UAAL,CAAgBC,SAAhB,CAA0BC,GAA1B,CAA8B,OAA9B;AACH;AACJ;AACJ,KAjBD;AAkBH;;AAED,SAASwD,aAAT,GAAyB;AACrB,QAAM7E,cAAcuC,mBAApB;AACA,QAAMxC,gBAAgBuE,aAAatE,WAAb,CAAtB;AACA,WAAO,CAACD,aAAD,EAAgBC,WAAhB,CAAP;AACH;;kBAEc6E,a;;;;;;;;;;;;;;AChIf;;;;AACA;;;;;;AAGA,IAAM3E,QAAQ,qBAAd;AACA,uBAAcA,KAAd,E;;;;;;;;;;;;;;;;;ACLA,SAAS4E,aAAT,CAAuBrE,CAAvB,EAA0B;AACtB;AACA,QAAI,CAAC,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8CsE,QAA9C,CAAuDtE,EAAEuE,IAAzD,CAAL,EAAqE;AACjEvE,UAAEwE,MAAF,CAASlE,KAAT,GAAiB,EAAjB;AACH,KAFD,MAEO,IAAIN,EAAEuE,IAAF,CAAOE,MAAP,KAAkB,CAAtB,EAAyB;AAC5BzE,UAAEwE,MAAF,CAASlE,KAAT,GAAiBN,EAAEuE,IAAnB;AACH;AACJ;;AAED,SAASpB,gBAAT,CAA0BK,GAA1B,EAA+BC,GAA/B,EAAoC;AAChC;AACA,QAAMC,UAAUpB,KAAKQ,KAAL,CAAWW,MAAM,CAAjB,CAAhB;AACA,QAAME,UAAUrB,KAAKQ,KAAL,CAAWU,MAAM,CAAjB,CAAhB;AACA,QAAMI,UAASF,UAAU,CAAV,GAAcC,OAA7B;AACA,WAAOC,OAAP;AACH;;AAED,SAASc,YAAT,CAAsB5E,GAAtB,EAA2BC,GAA3B,EAAgC;AAC5B,QAAM4E,WAAWjF,SAASC,aAAT,CAAuB,QAAvB,CAAjB;AACA,QAAMiF,UAAUlF,SAASmF,aAAT,CAAuB,KAAvB,CAAhB;AACAD,YAAQE,SAAR,GAAoB,UAApB;;AAEA,QAAI1E,aAAJ;AACA,QAAIN,QAAQ,CAAZ,EAAe;AACXM,eAAOV,SAASmF,aAAT,CAAuB,OAAvB,CAAP;AACAzE,aAAK0E,SAAL,GAAiB,YAAjB;AACH,KAHD,MAGO;AACH1E,eAAOV,SAASmF,aAAT,CAAuB,MAAvB,CAAP;AACAzE,aAAK+D,WAAL,GAAmBrE,GAAnB;AACAM,aAAK0E,SAAL,GAAiB,WAAjB;AACH;;AAED;AACA,QAAMtB,MAAMzD,MAAM,CAAlB;AACA,QAAM0D,MAAMnB,KAAKQ,KAAL,CAAW/C,MAAM,CAAjB,CAAZ;AACAK,SAAKI,OAAL,CAAaC,KAAb,GAAqBV,GAArB;AACAK,SAAKI,OAAL,CAAauE,MAAb,GAAsBvB,GAAtB;AACApD,SAAKI,OAAL,CAAaiD,GAAb,GAAmBA,GAAnB;AACArD,SAAKI,OAAL,CAAaoD,OAAb,GAAuBT,iBAAiBK,GAAjB,EAAsBC,GAAtB,CAAvB;;AAEAkB,aAASK,WAAT,CAAqBJ,OAArB;AACAA,YAAQI,WAAR,CAAoB5E,IAApB;;AAEAA,SAAKiB,gBAAL,CAAsB,OAAtB,EAA+BgD,aAA/B;AACA;AACH;;kBAEcK,Y","file":"assets/javascript/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./assets/javascript/sudoku.js\");\n","import populateTile from './tile';\nimport generateBoard from './generateBoard';\n\n// const unsolvedBoard = [\n//     5, 3, 0, 0, 7, 0, 0, 0, 0,\n//     6, 0, 0, 1, 9, 5, 0, 0, 0,\n//     0, 9, 8, 0, 0, 0, 0, 6, 0,\n//     8, 0, 0, 0, 6, 0, 0, 0, 3,\n//     4, 0, 0, 8, 0, 3, 0, 0, 1,\n//     7, 0, 0, 0, 2, 0, 0, 0, 6,\n//     0, 6, 0, 0, 0, 0, 2, 8, 0,\n//     0, 0, 0, 4, 1, 9, 0, 0, 5,\n//     0, 0, 0, 0, 8, 0, 0, 7, 9\n// ]\n\n// const solvedBoard = [\n//     5, 3, 4, 6, 7, 8, 9, 1, 2,\n//     6, 7, 2, 1, 9, 5, 3, 4, 8,\n//     1, 9, 8, 3, 4, 2, 5, 6, 7,\n//     8, 5, 9, 7, 6, 1, 4, 2, 3,\n//     4, 2, 6, 8, 5, 3, 7, 9, 1,\n//     7, 1, 3, 9, 2, 4, 8, 5, 6,\n//     9, 6, 1, 5, 3, 7, 2, 8, 4,\n//     2, 8, 7, 4, 1, 9, 6, 3, 5,\n//     3, 4, 5, 2, 8, 6, 1, 7, 9\n// ]\n\nexport default class Board { \n    constructor() {\n        // Logic for creating a board with random board generator\n        const [unsolvedBoard, solvedBoard] = generateBoard();\n\n        this.render(solvedBoard);\n    }\n\n    render(unsolvedBoard) {\n        // clear previous board, if any\n        const board = document.querySelector('.board');\n        board.innerHTML = '';\n\n        unsolvedBoard.forEach((num, idx) => {\n            populateTile(num, idx);\n        });\n    }\n\n    // button methods     \n    checkProgress(e) {        \n        const tiles = document.querySelectorAll('.tile');\n        let solved = true; \n        tiles.forEach((tile, idx) => {\n            // only check input (not span) tiles \n            if (tile.tagName === 'SPAN') {\n                return ; \n            } else if (tile.value === '') {\n                solved = false;\n            } else if (solvedBoard[parseInt(tile.dataset.index)] !== parseInt(tile.value)) {\n                tile.parentNode.classList.add('incorrect');\n                solved = false;\n            } else if (solvedBoard[parseInt(tile.dataset.index)] === parseInt(tile.value)) {\n                tile.parentNode.classList.add('correct');\n            }\n        });\n\n        if (solved) {\n            window.alert('Congratulations! You solved the puzzle!');\n        }\n    }\n\n    clearHints(e) {\n        const hintedTiles = document.querySelectorAll('.correct, .incorrect');\n        hintedTiles.forEach(tile => {\n            tile.classList.remove('correct');\n            tile.classList.remove('incorrect');\n        }) \n    }\n\n    solve(e) {\n        const inputs = document.querySelectorAll('.tile.input');\n        inputs.forEach((input) => {\n            input.value = solvedBoard[input.dataset.index];\n        }) \n    }\n\n    reset(e) {\n        this.render(unsolvedBoard);\n    }\n}\n\n\n","import Board from './board';\n\nfunction enableButtons(board) {    \n    const submitButton = document.querySelector('.check');\n    submitButton.addEventListener('click', board.checkProgress.bind(board));\n\n    const clearButton = document.querySelector('.clear');\n    clearButton.addEventListener('click', board.clearHints);\n    \n    const giveUpButton = document.querySelector('.give-up');\n    giveUpButton.addEventListener('click', board.solve);\n\n    const resetButton = document.querySelector('.reset');\n    resetButton.addEventListener('click', board.reset.bind(board));\n}    \n\nexport default enableButtons; ","function createSolvedBoard(diff = 'easy') {\n    // number of tiles to be given in puzzle\n    const diffMap = {\n        'easy': 45,\n        'medium': 35,\n        'hard': 25\n    }\n\n    let board = new Array(81).fill(0);\n    board.forEach((zero, idx) => {\n        let assigned = false;\n        while (!assigned) {\n            const rand = Math.ceil(Math.random() * 9);\n            if (validateRow(rand, idx, board)) {\n                board[idx] = rand;\n                assigned = true;\n            }\n        }\n    })\n\n    return board;\n}\n\nfunction validateColumn(rand, idx, board) {\n    const randColIndex = idx % 9;\n    for (let i = randColIndex; i < 81; i += 9) {\n        if (rand === board[i]) return false;\n    }\n    // for (let i = randColIndex * Math.floor(idx % 9); i > 0; i -= 9) {\n    //     console.log(i);\n    //     if (rand === board[i]) {\n    //         return false;\n    //     }\n    // }\n\n    return true;\n}\n\nfunction validateRow(rand, idx, board) {\n    const randRowIndex = Math.floor(idx / 9);\n    const randColIndex = idx % 9;\n    const rowStart = randRowIndex * 9;\n    const rowEnd = rowStart + 9;\n\n    if (randColIndex === 0) return true;\n    for (let i = idx - 1; i >= rowStart; i--) {\n        if (rand === board[i]) return false;\n    }\n    return true;\n}\n\nfunction validateSubgrid(rand, idx, board) {\n    const randColIndex = idx % 9;\n    const randRowIndex = Math.floor(idx / 9);\n    const randSubgrid = determineSubgrid(randColIndex, randRowIndex);\n\n    board.forEach((tile, tileIdx) => {\n        const tileColIndex = tileIdx % 9;\n        const tileRowIndex = Math.floor(tileIdx / 9);\n        const tileSubgrid = determineSubgrid(tileColIndex, tileRowIndex);\n\n        if (randSubgrid === tileSubgrid && rand === tile && idx !== tileIdx) {\n            return false;\n        }\n    });\n    return true;\n}\n\nfunction determineSubgrid(col, row) {\n    // formula to determine subgrid found at: https://medium.com/@0xsven/sudoku-validation-with-javascript-1297712093bf\n    const gridRow = Math.floor(row / 3);\n    const gridCol = Math.floor(col / 3);\n    const subGrid = gridRow * 3 + gridCol;\n    return subGrid;\n}\n\nfunction unsolveBoard(solvedBoard) {\n    const unsolvedBoard = [];\n    // let j = diffMap[diff];  \n    // solvedBoard.forEach((num, idx) => {\n    //     // Math.ceil(Math.random() * 10)\n    //     // check against row \n    //     const rowIndex = Math.floor(idx / 9);\n    //     const rowStart = rowIndex * 9;\n    //     const rowEnd = rowStart + 9;\n    //     for (let i = rowStart; i < rowEnd; i++) {\n    //         let placed = false; \n    //     }\n\n    // numbers.forEach((num, idx) => {\n    //     populateTile(num, idx);\n    // });\n\n    return unsolvedBoard;\n}\n\nfunction checkRow(tile, tiles) {\n    const tileRowNum = tile.dataset.row;\n    const rowTiles = document.querySelectorAll(`[data-row=\"${tileRowNum}\"]`);\n    // console.log('tileRowNum', tileRowNum);\n    // console.log('rowTiles', rowTiles);\n\n    rowTiles.forEach(rowTile => {\n        // console.log(rowTile.value || rowTile.textContent);\n        // console.log('tile index', tile.dataset.index);\n        // console.log('rowTile index', rowTile.dataset.index);\n        const rowTileNum = rowTile.textContent ? rowTile.textContent : rowTile.value;\n\n        // don't check a tile against itself   \n        if (tile.dataset.index === rowTile.dataset.index) {\n            return;\n        } else if (rowTile.value === '') {\n            // don't check against an empty input \n            return;\n        } else {\n            if (tile.value === rowTileNum) {\n                tile.parentNode.classList.add('wrong');\n            }\n        }\n    });\n}\n\nfunction generateBoard() {\n    const solvedBoard = createSolvedBoard();\n    const unsolvedBoard = unsolveBoard(solvedBoard);\n    return [unsolvedBoard, solvedBoard]\n}\n\nexport default generateBoard;\n\n","import Board from './board.js';\nimport enableButtons from './buttons';\n\n\nconst board = new Board();\nenableButtons(board);\n\n\n\n\n","function validateInput(e) {        \n    // only permit a single number as input \n    if (![\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"].includes(e.data)) {\n        e.target.value = '';\n    } else if (e.data.length === 1) {\n        e.target.value = e.data;\n    }\n}\n\nfunction determineSubgrid(col, row) {\n    // formula to determine subgrid found at: https://medium.com/@0xsven/sudoku-validation-with-javascript-1297712093bf\n    const gridRow = Math.floor(row / 3);\n    const gridCol = Math.floor(col / 3);\n    const subGrid= gridRow * 3 + gridCol;\n    return subGrid;\n}\n\nfunction populateTile(num, idx) {\n    const boardDiv = document.querySelector('.board');\n    const tileDiv = document.createElement('div')\n    tileDiv.className = 'tile-div';\n    \n    let tile;\n    if (num === 0) {\n        tile = document.createElement('input');\n        tile.className = 'tile input';\n    } else {\n        tile = document.createElement('span');\n        tile.textContent = num;\n        tile.className = 'tile span';\n    }\n\n    // add index, column, and row as data attributes \n    const col = idx % 9;\n    const row = Math.floor(idx / 9);\n    tile.dataset.index = idx;\n    tile.dataset.column = col;\n    tile.dataset.row = row;\n    tile.dataset.subGrid = determineSubgrid(col, row);\n\n    boardDiv.appendChild(tileDiv);\n    tileDiv.appendChild(tile); \n\n    tile.addEventListener('input', validateInput);\n    // tile.addEventListener('change', () => console.log(e))\n}\n\nexport default populateTile;"],"sourceRoot":""}